!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),o=n.n(r);const i="restaurants";class s{static get DATABASE_URL(){return"http://localhost:1337/restaurants/"}static idb(){return o.a.open("app",1,e=>{e.createObjectStore(i,{keyPath:"id"}).createIndex("id","id")})}static saveIdb(e){return s.idb().then(t=>{if(!t)return;const n=t.transaction(i,"readwrite"),r=n.objectStore(i);return e.forEach(e=>{r.put(e)}),n.complete})}static getIdb(){return s.idb().then(e=>{if(!e)return;return e.transaction(i).objectStore(i).getAll()})}static fetchData(){return fetch(s.DATABASE_URL).then(e=>e.json()).then(e=>(s.saveIdb(e),e))}static fetchRestaurants(e){return s.getIdb().then(e=>e.length?Promise.resolve(e):s.fetchData()).then(t=>{e(null,t)}).catch(t=>{e(t,null)})}static fetchRestaurantById(e,t){s.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){s.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){s.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){s.fetchRestaurants((r,o)=>{if(r)n(r,null);else{let r=o;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){s.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){s.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e="10",t="/",n=""){return`/dist/img${t}${e}${n}.jpg`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:s.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}},function(e,t,n){"use strict";!function(){function t(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function n(e,n,r){var o,i=new Promise(function(i,s){t(o=e[n].apply(e,r)).then(i,s)});return i.request=o,i}function r(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function o(e,t,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return n(this[t],o,arguments)})})}function i(e,t,n,r){r.forEach(function(r){r in n.prototype&&(e.prototype[r]=function(){return this[t][r].apply(this[t],arguments)})})}function s(e,t,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return e=this[t],(r=n(e,o,arguments)).then(function(e){if(e)return new c(e,r.request)});var e,r})})}function a(e){this._index=e}function c(e,t){this._cursor=e,this._request=t}function u(e){this._store=e}function l(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function d(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new l(n)}function f(e){this._db=e}r(a,"_index",["name","keyPath","multiEntry","unique"]),o(a,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),s(a,"_index",IDBIndex,["openCursor","openKeyCursor"]),r(c,"_cursor",["direction","key","primaryKey","value"]),o(c,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(e){e in IDBCursor.prototype&&(c.prototype[e]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[e].apply(n._cursor,r),t(n._request).then(function(e){if(e)return new c(e,n._request)})})})}),u.prototype.createIndex=function(){return new a(this._store.createIndex.apply(this._store,arguments))},u.prototype.index=function(){return new a(this._store.index.apply(this._store,arguments))},r(u,"_store",["name","keyPath","indexNames","autoIncrement"]),o(u,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),s(u,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),i(u,"_store",IDBObjectStore,["deleteIndex"]),l.prototype.objectStore=function(){return new u(this._tx.objectStore.apply(this._tx,arguments))},r(l,"_tx",["objectStoreNames","mode"]),i(l,"_tx",IDBTransaction,["abort"]),d.prototype.createObjectStore=function(){return new u(this._db.createObjectStore.apply(this._db,arguments))},r(d,"_db",["name","version","objectStoreNames"]),i(d,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new l(this._db.transaction.apply(this._db,arguments))},r(f,"_db",["name","version","objectStoreNames"]),i(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[u,a].forEach(function(t){t.prototype[e.replace("open","iterate")]=function(){var t,n=(t=arguments,Array.prototype.slice.call(t)),r=n[n.length-1],o=this._store||this._index,i=o[e].apply(o,n.slice(0,-1));i.onsuccess=function(){r(i.result)}}})}),[a,u].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,r=[];return new Promise(function(o){n.iterateCursor(e,function(e){e?(r.push(e.value),void 0===t||r.length!=t?e.continue():o(r)):o(r)})})})});var p={open:function(e,t,r){var o=n(indexedDB,"open",[e,t]),i=o.request;return i.onupgradeneeded=function(e){r&&r(new d(i.result,e.oldVersion,i.transaction))},o.then(function(e){return new f(e)})},delete:function(e){return n(indexedDB,"deleteDatabase",[e])}};e.exports=p,e.exports.default=e.exports}()},,,function(e,t,n){"use strict";n.r(t);var r=n(0);let o=[];function i(e){document.getElementById(e).addEventListener("change",()=>{l()})}document.addEventListener("DOMContentLoaded",()=>{s(),c()}),i("neighborhoods-select"),i("cuisines-select");let s=()=>{r.a.fetchNeighborhoods((e,t)=>{e?console.error(e):(self.neighborhoods=t,a())})},a=(e=self.neighborhoods)=>{const t=document.getElementById("neighborhoods-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,n.setAttribute("role","option"),n.setAttribute("aria-label",e),t.append(n)})},c=()=>{r.a.fetchCuisines((e,t)=>{e?console.error(e):(self.cuisines=t,u())})},u=(e=self.cuisines)=>{const t=document.getElementById("cuisines-select");e.forEach(e=>{const n=document.createElement("option");n.innerHTML=e,n.value=e,n.setAttribute("role","option"),n.setAttribute("aria-label",e),t.append(n)})};window.initMap=(()=>{self.map=new google.maps.Map(document.getElementById("map"),{zoom:12,center:{lat:40.722216,lng:-73.987501},scrollwheel:!1}),l()});let l=()=>{const e=document.getElementById("cuisines-select"),t=document.getElementById("neighborhoods-select"),n=e.selectedIndex,o=t.selectedIndex,i=e[n].value,s=t[o].value;r.a.fetchRestaurantByCuisineAndNeighborhood(i,s,(e,t)=>{e?console.error(e):(d(t),f())})},d=e=>{self.restaurants=[],document.getElementById("restaurants-list").innerHTML="",o.forEach(e=>e.setMap(null)),self.markers=[],self.restaurants=e},f=(e=self.restaurants)=>{const t=document.getElementById("restaurants-list");e.forEach((n,r)=>{t.append(p(n,e.length,r))}),h()},p=(e,t,n)=>{const o=document.createElement("li");o.setAttribute("aria-setsize",t),o.setAttribute("aria-posinset",(Number(n)+1).toString());const i=document.createElement("img");i.className="restaurant-img lazy",i.setAttribute("data-src",r.a.imageUrlForRestaurant(e.photograph,"/responsive/","_sm")),i.src="./dist/img/download.jpg",i.alt=`Image of ${e.name} Restaurant`,o.append(i);const s=document.createElement("h2");s.innerHTML=e.name,o.append(s);const a=document.createElement("p");a.innerHTML=e.neighborhood,o.append(a);const c=document.createElement("p");c.innerHTML=e.address,o.append(c);const u=document.createElement("a");return u.innerHTML="View Details",u.href=r.a.urlForRestaurant(e),u.setAttribute("aria-label","View details "+e.name),o.append(u),o},h=(e=self.restaurants)=>{e.forEach(e=>{const t=r.a.mapMarkerForRestaurant(e,self.map);google.maps.event.addListener(t,"click",()=>{window.location.href=t.url}),self.markers.push(t)})}},function(e,t){function n(){let e=document.getElementsByClassName("lazy");for(let t=0;t<e.length;t++)o(e[t])&&(e[t].src=e[t].getAttribute("data-src"))}function r(e,t){window.addEventListener?window.addEventListener(e,t):window.attachEvent("on"+e,t)}function o(e){let t=e.getBoundingClientRect();return t.bottom>=0&&t.right>=0&&t.top<=(window.innerHeight||document.documentElement.clientHeight)&&t.left<=(window.innerWidth||document.documentElement.clientWidth)}r("load",n),r("scroll",n)},function(e,t,n){n(5),e.exports=n(4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vanMvZGJoZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lkYi9saWIvaWRiLmpzIiwid2VicGFjazovLy8uL2pzL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vanMvbGF6eUxvYWRpbmcuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwidmFsdWUiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImlkYk5hbWUiLCJEQkhlbHBlciIsIkRBVEFCQVNFX1VSTCIsIltvYmplY3QgT2JqZWN0XSIsImlkYl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJhIiwib3BlbiIsInVwZ3JhZGVEYiIsImNyZWF0ZU9iamVjdFN0b3JlIiwia2V5UGF0aCIsImNyZWF0ZUluZGV4IiwiZGF0YSIsImlkYiIsInRoZW4iLCJkYiIsInR4IiwidHJhbnNhY3Rpb24iLCJzdG9yZSIsIm9iamVjdFN0b3JlIiwiZm9yRWFjaCIsInJlc3RhdXJhbnQiLCJwdXQiLCJjb21wbGV0ZSIsImdldEFsbCIsImZldGNoIiwicmVzcG9uc2UiLCJqc29uIiwicmVzdGF1cmFudHMiLCJzYXZlSWRiIiwiY2FsbGJhY2siLCJnZXRJZGIiLCJsZW5ndGgiLCJQcm9taXNlIiwicmVzb2x2ZSIsImZldGNoRGF0YSIsImNhdGNoIiwiZXJyb3IiLCJpZCIsImZldGNoUmVzdGF1cmFudHMiLCJmaW5kIiwiY3Vpc2luZSIsInJlc3VsdHMiLCJmaWx0ZXIiLCJjdWlzaW5lX3R5cGUiLCJuZWlnaGJvcmhvb2QiLCJuZWlnaGJvcmhvb2RzIiwibWFwIiwidiIsInVuaXF1ZU5laWdoYm9yaG9vZHMiLCJpbmRleE9mIiwiY3Vpc2luZXMiLCJ1bmlxdWVDdWlzaW5lcyIsInBob3RvIiwiZGlyIiwic3VmZml4IiwiZ29vZ2xlIiwibWFwcyIsIk1hcmtlciIsInBvc2l0aW9uIiwibGF0bG5nIiwidGl0bGUiLCJ1cmwiLCJ1cmxGb3JSZXN0YXVyYW50IiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwiRFJPUCIsInByb21pc2lmeVJlcXVlc3QiLCJyZXF1ZXN0IiwicmVqZWN0Iiwib25zdWNjZXNzIiwicmVzdWx0Iiwib25lcnJvciIsInByb21pc2lmeVJlcXVlc3RDYWxsIiwib2JqIiwibWV0aG9kIiwiYXJncyIsImFwcGx5IiwicHJveHlQcm9wZXJ0aWVzIiwiUHJveHlDbGFzcyIsInRhcmdldFByb3AiLCJwcm9wZXJ0aWVzIiwicHJvcCIsInRoaXMiLCJzZXQiLCJ2YWwiLCJwcm94eVJlcXVlc3RNZXRob2RzIiwiQ29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJwcm94eU1ldGhvZHMiLCJwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzIiwiQ3Vyc29yIiwiSW5kZXgiLCJpbmRleCIsIl9pbmRleCIsImN1cnNvciIsIl9jdXJzb3IiLCJfcmVxdWVzdCIsIk9iamVjdFN0b3JlIiwiX3N0b3JlIiwiVHJhbnNhY3Rpb24iLCJpZGJUcmFuc2FjdGlvbiIsIl90eCIsIm9uY29tcGxldGUiLCJvbmFib3J0IiwiVXBncmFkZURCIiwib2xkVmVyc2lvbiIsIl9kYiIsIkRCIiwiSURCSW5kZXgiLCJJREJDdXJzb3IiLCJtZXRob2ROYW1lIiwiSURCT2JqZWN0U3RvcmUiLCJJREJUcmFuc2FjdGlvbiIsIklEQkRhdGFiYXNlIiwiZnVuY05hbWUiLCJyZXBsYWNlIiwiYXJyIiwiQXJyYXkiLCJzbGljZSIsIm5hdGl2ZU9iamVjdCIsInF1ZXJ5IiwiY291bnQiLCJpbnN0YW5jZSIsIml0ZW1zIiwiaXRlcmF0ZUN1cnNvciIsInB1c2giLCJ1bmRlZmluZWQiLCJjb250aW51ZSIsImV4cCIsInZlcnNpb24iLCJ1cGdyYWRlQ2FsbGJhY2siLCJpbmRleGVkREIiLCJvbnVwZ3JhZGVuZWVkZWQiLCJldmVudCIsImRlbGV0ZSIsImRlZmF1bHQiLCJtYXJrZXJzIiwidXBkYXRlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVSZXN0YXVyYW50cyIsImZldGNoTmVpZ2hib3Job29kcyIsImZldGNoQ3Vpc2luZXMiLCJfZGJoZWxwZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNvbnNvbGUiLCJzZWxmIiwiZmlsbE5laWdoYm9yaG9vZHNIVE1MIiwic2VsZWN0Iiwib3B0aW9uIiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInNldEF0dHJpYnV0ZSIsImFwcGVuZCIsImZpbGxDdWlzaW5lc0hUTUwiLCJ3aW5kb3ciLCJpbml0TWFwIiwiTWFwIiwiem9vbSIsImNlbnRlciIsImxhdCIsImxuZyIsInNjcm9sbHdoZWVsIiwiY1NlbGVjdCIsIm5TZWxlY3QiLCJjSW5kZXgiLCJzZWxlY3RlZEluZGV4IiwibkluZGV4IiwiZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kIiwicmVzZXRSZXN0YXVyYW50cyIsImZpbGxSZXN0YXVyYW50c0hUTUwiLCJzZXRNYXAiLCJ1bCIsImNyZWF0ZVJlc3RhdXJhbnRIVE1MIiwiYWRkTWFya2Vyc1RvTWFwIiwibGkiLCJOdW1iZXIiLCJ0b1N0cmluZyIsImltYWdlIiwiY2xhc3NOYW1lIiwiaW1hZ2VVcmxGb3JSZXN0YXVyYW50IiwicGhvdG9ncmFwaCIsInNyYyIsImFsdCIsImFkZHJlc3MiLCJtb3JlIiwiaHJlZiIsIm1hcmtlciIsIm1hcE1hcmtlckZvclJlc3RhdXJhbnQiLCJhZGRMaXN0ZW5lciIsImxvY2F0aW9uIiwibGF6eUxvYWQiLCJsYXp5IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImlzSW5WaWV3cG9ydCIsImdldEF0dHJpYnV0ZSIsInJlZ2lzdGVyTGlzdGVuZXIiLCJmdW5jIiwiYXR0YWNoRXZlbnQiLCJlbCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJib3R0b20iLCJyaWdodCIsInRvcCIsImlubmVySGVpZ2h0IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50SGVpZ2h0IiwibGVmdCIsImlubmVyV2lkdGgiLCJjbGllbnRXaWR0aCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixLQU1BWixFQUFBbUIsRUFBQSxTQUFBakIsR0FDQVksT0FBQUMsZUFBQWIsRUFBQSxjQUFpRGtCLE9BQUEsS0FJakRwQixFQUFBcUIsRUFBQSxTQUFBbEIsR0FDQSxJQUFBUyxFQUFBVCxLQUFBbUIsV0FDQSxXQUEyQixPQUFBbkIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBSCxFQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQVUsRUFBQUMsR0FBc0QsT0FBQVYsT0FBQVcsVUFBQUMsZUFBQW5CLEtBQUFnQixFQUFBQyxJ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Q0FVLEVBQUF6TixHQUFBNE4sYUFBQSxhQUtBLFNBQUFDLEVBQUEvRCxFQUFBZ0UsR0FDQTFDLE9BQUFmLGlCQUNBZSxPQUFBZixpQkFBQVAsRUFBQWdFLEdBRUExQyxPQUFBMkMsWUFBQSxLQUFBakUsRUFBQWdFLEdBSUEsU0FBQUgsRUFBQUssR0FDQSxJQUFBQyxFQUFBRCxFQUFBRSx3QkFFQSxPQUNBRCxFQUFBRSxRQUFBLEdBQ0FGLEVBQUFHLE9BQUEsR0FFQUgsRUFBQUksTUFDQWpELE9BQUFrRCxhQUNBbkUsU0FBQW9FLGdCQUFBQyxlQUVBUCxFQUFBUSxPQUNBckQsT0FBQXNELFlBQ0F2RSxTQUFBb0UsZ0JBQUFJLGFBSUFkLEVBQUEsT0FBQUwsR0FDQUssRUFBQSxTQUFBTCIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA2KTtcbiIsImltcG9ydCBpZGIgZnJvbSAnaWRiJztcclxuXHJcbmNvbnN0IGlkYk5hbWUgPSAncmVzdGF1cmFudHMnO1xyXG5cclxuLyoqXHJcbiAqIENvbW1vbiBkYXRhYmFzZSBoZWxwZXIgZnVuY3Rpb25zLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgREJIZWxwZXIge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGF0YWJhc2UgVVJMLlxyXG4gICAgICogQ2hhbmdlIHRoaXMgdG8gcmVzdGF1cmFudHMuanNvbiBmaWxlIGxvY2F0aW9uIG9uIHlvdXIgc2VydmVyLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0IERBVEFCQVNFX1VSTCgpIHtcclxuICAgICAgICBjb25zdCBwb3J0ID0gMTMzNzsgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBzZXJ2ZXIgcG9ydFxyXG4gICAgICAgIHJldHVybiBgaHR0cDovL2xvY2FsaG9zdDoke3BvcnR9L3Jlc3RhdXJhbnRzL2A7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAqIE9wZW4gaWRiXHJcbiAgICAqL1xyXG5cclxuICAgIHN0YXRpYyBpZGIoKSB7XHJcbiAgICAgICAgcmV0dXJuIGlkYi5vcGVuKCdhcHAnLCAxLCAodXBncmFkZURiKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0b3JlID0gdXBncmFkZURiLmNyZWF0ZU9iamVjdFN0b3JlKGlkYk5hbWUsIHtrZXlQYXRoOiAnaWQnfSk7XHJcbiAgICAgICAgICAgIHN0b3JlLmNyZWF0ZUluZGV4KCdpZCcsICdpZCcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2F2ZSBpZGJcclxuICAgICAqL1xyXG5cclxuICAgIHN0YXRpYyBzYXZlSWRiKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gREJIZWxwZXIuaWRiKCkudGhlbihkYiA9PiB7XHJcbiAgICAgICAgICAgIGlmICghZGIpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oaWRiTmFtZSwgJ3JlYWR3cml0ZScpO1xyXG4gICAgICAgICAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKGlkYk5hbWUpO1xyXG4gICAgICAgICAgICBkYXRhLmZvckVhY2gocmVzdGF1cmFudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBzdG9yZS5wdXQocmVzdGF1cmFudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdHguY29tcGxldGU7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBpZGJcclxuICAgICAqL1xyXG5cclxuICAgIHN0YXRpYyBnZXRJZGIoKSB7XHJcbiAgICAgICAgcmV0dXJuIERCSGVscGVyLmlkYigpLnRoZW4oZGIgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWRiKSByZXR1cm47XHJcbiAgICAgICAgICAgIGNvbnN0IHN0b3JlID0gZGIudHJhbnNhY3Rpb24oaWRiTmFtZSkub2JqZWN0U3RvcmUoaWRiTmFtZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdG9yZS5nZXRBbGwoKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmV0Y2ggcmVzdGF1cmFudHMgdG8gaWRiXHJcbiAgICAgKi9cclxuXHJcbiAgICBzdGF0aWMgZmV0Y2hEYXRhKCkge1xyXG4gICAgICAgIHJldHVybiBmZXRjaChEQkhlbHBlci5EQVRBQkFTRV9VUkwpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcclxuICAgICAgICAgICAgLnRoZW4ocmVzdGF1cmFudHMgPT4ge1xyXG4gICAgICAgICAgICAgICAgREJIZWxwZXIuc2F2ZUlkYihyZXN0YXVyYW50cyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdGF1cmFudHM7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGZXRjaCBhbGwgcmVzdGF1cmFudHMuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRzKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIERCSGVscGVyLmdldElkYigpLnRoZW4ocmVzdGF1cmFudHMgPT4ge1xyXG4gICAgICAgICAgICBpZiAocmVzdGF1cmFudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3RhdXJhbnRzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBEQkhlbHBlci5mZXRjaERhdGEoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLnRoZW4ocmVzdGF1cmFudHMgPT4ge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN0YXVyYW50cyk7XHJcbiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZldGNoIGEgcmVzdGF1cmFudCBieSBpdHMgSUQuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeUlkKGlkLCBjYWxsYmFjaykge1xyXG4gICAgICAgIC8vIGZldGNoIGFsbCByZXN0YXVyYW50cyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZy5cclxuICAgICAgICBEQkhlbHBlci5mZXRjaFJlc3RhdXJhbnRzKChlcnJvciwgcmVzdGF1cmFudHMpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN0YXVyYW50ID0gcmVzdGF1cmFudHMuZmluZChyID0+IHIuaWQgPT0gaWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3RhdXJhbnQpIHsgLy8gR290IHRoZSByZXN0YXVyYW50XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdGF1cmFudCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBSZXN0YXVyYW50IGRvZXMgbm90IGV4aXN0IGluIHRoZSBkYXRhYmFzZVxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdSZXN0YXVyYW50IGRvZXMgbm90IGV4aXN0JywgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZldGNoIHJlc3RhdXJhbnRzIGJ5IGEgY3Vpc2luZSB0eXBlIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lKGN1aXNpbmUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzICB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZ1xyXG4gICAgICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIEZpbHRlciByZXN0YXVyYW50cyB0byBoYXZlIG9ubHkgZ2l2ZW4gY3Vpc2luZSB0eXBlXHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRzID0gcmVzdGF1cmFudHMuZmlsdGVyKHIgPT4gci5jdWlzaW5lX3R5cGUgPT0gY3Vpc2luZSk7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHRzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmV0Y2ggcmVzdGF1cmFudHMgYnkgYSBuZWlnaGJvcmhvb2Qgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeU5laWdoYm9yaG9vZChuZWlnaGJvcmhvb2QsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXHJcbiAgICAgICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gRmlsdGVyIHJlc3RhdXJhbnRzIHRvIGhhdmUgb25seSBnaXZlbiBuZWlnaGJvcmhvb2RcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdHMgPSByZXN0YXVyYW50cy5maWx0ZXIociA9PiByLm5laWdoYm9yaG9vZCA9PSBuZWlnaGJvcmhvb2QpO1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZldGNoIHJlc3RhdXJhbnRzIGJ5IGEgY3Vpc2luZSBhbmQgYSBuZWlnaGJvcmhvb2Qgd2l0aCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBmZXRjaFJlc3RhdXJhbnRCeUN1aXNpbmVBbmROZWlnaGJvcmhvb2QoY3Vpc2luZSwgbmVpZ2hib3Job29kLCBjYWxsYmFjaykge1xyXG4gICAgICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xyXG4gICAgICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHRzID0gcmVzdGF1cmFudHNcclxuICAgICAgICAgICAgICAgIGlmIChjdWlzaW5lICE9ICdhbGwnKSB7IC8vIGZpbHRlciBieSBjdWlzaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKHIgPT4gci5jdWlzaW5lX3R5cGUgPT0gY3Vpc2luZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobmVpZ2hib3Job29kICE9ICdhbGwnKSB7IC8vIGZpbHRlciBieSBuZWlnaGJvcmhvb2RcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5maWx0ZXIociA9PiByLm5laWdoYm9yaG9vZCA9PSBuZWlnaGJvcmhvb2QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZldGNoIGFsbCBuZWlnaGJvcmhvb2RzIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZmV0Y2hOZWlnaGJvcmhvb2RzKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgLy8gRmV0Y2ggYWxsIHJlc3RhdXJhbnRzXHJcbiAgICAgICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50cygoZXJyb3IsIHJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIG51bGwpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gR2V0IGFsbCBuZWlnaGJvcmhvb2RzIGZyb20gYWxsIHJlc3RhdXJhbnRzXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZWlnaGJvcmhvb2RzID0gcmVzdGF1cmFudHMubWFwKCh2LCBpKSA9PiByZXN0YXVyYW50c1tpXS5uZWlnaGJvcmhvb2QpXHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIG5laWdoYm9yaG9vZHNcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVuaXF1ZU5laWdoYm9yaG9vZHMgPSBuZWlnaGJvcmhvb2RzLmZpbHRlcigodiwgaSkgPT4gbmVpZ2hib3Job29kcy5pbmRleE9mKHYpID09IGkpXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB1bmlxdWVOZWlnaGJvcmhvb2RzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmV0Y2ggYWxsIGN1aXNpbmVzIHdpdGggcHJvcGVyIGVycm9yIGhhbmRsaW5nLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZmV0Y2hDdWlzaW5lcyhjYWxsYmFjaykge1xyXG4gICAgICAgIC8vIEZldGNoIGFsbCByZXN0YXVyYW50c1xyXG4gICAgICAgIERCSGVscGVyLmZldGNoUmVzdGF1cmFudHMoKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIEdldCBhbGwgY3Vpc2luZXMgZnJvbSBhbGwgcmVzdGF1cmFudHNcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1aXNpbmVzID0gcmVzdGF1cmFudHMubWFwKCh2LCBpKSA9PiByZXN0YXVyYW50c1tpXS5jdWlzaW5lX3R5cGUpXHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZHVwbGljYXRlcyBmcm9tIGN1aXNpbmVzXHJcbiAgICAgICAgICAgICAgICBjb25zdCB1bmlxdWVDdWlzaW5lcyA9IGN1aXNpbmVzLmZpbHRlcigodiwgaSkgPT4gY3Vpc2luZXMuaW5kZXhPZih2KSA9PSBpKVxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgdW5pcXVlQ3Vpc2luZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXN0YXVyYW50IHBhZ2UgVVJMLlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgdXJsRm9yUmVzdGF1cmFudChyZXN0YXVyYW50KSB7XHJcbiAgICAgICAgcmV0dXJuIChgLi9yZXN0YXVyYW50Lmh0bWw/aWQ9JHtyZXN0YXVyYW50LmlkfWApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVzdGF1cmFudCBpbWFnZSBVUkwuXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBpbWFnZVVybEZvclJlc3RhdXJhbnQocGhvdG89JzEwJywgZGlyID0gJy8nLCBzdWZmaXggPSAnJykge1xyXG4gICAgICAgIHJldHVybiAoYC9kaXN0L2ltZyR7ZGlyfSR7cGhvdG99JHtzdWZmaXh9LmpwZ2ApO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWFwIG1hcmtlciBmb3IgYSByZXN0YXVyYW50LlxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgbWFwTWFya2VyRm9yUmVzdGF1cmFudChyZXN0YXVyYW50LCBtYXApIHtcclxuICAgICAgICBjb25zdCBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZXN0YXVyYW50LmxhdGxuZyxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiByZXN0YXVyYW50Lm5hbWUsXHJcbiAgICAgICAgICAgICAgICB1cmw6IERCSGVscGVyLnVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCksXHJcbiAgICAgICAgICAgICAgICBtYXA6IG1hcCxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogZ29vZ2xlLm1hcHMuQW5pbWF0aW9uLkRST1BcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIG1hcmtlcjtcclxuICAgIH1cclxuXHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4oZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHRvQXJyYXkoYXJyKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycik7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXNvbHZlKHJlcXVlc3QucmVzdWx0KTtcbiAgICAgIH07XG5cbiAgICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpIHtcbiAgICB2YXIgcmVxdWVzdDtcbiAgICB2YXIgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcmVxdWVzdCA9IG9ialttZXRob2RdLmFwcGx5KG9iaiwgYXJncyk7XG4gICAgICBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcblxuICAgIHAucmVxdWVzdCA9IHJlcXVlc3Q7XG4gICAgcmV0dXJuIHA7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9taXNpZnlDdXJzb3JSZXF1ZXN0Q2FsbChvYmosIG1ldGhvZCwgYXJncykge1xuICAgIHZhciBwID0gcHJvbWlzaWZ5UmVxdWVzdENhbGwob2JqLCBtZXRob2QsIGFyZ3MpO1xuICAgIHJldHVybiBwLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgIHJldHVybiBuZXcgQ3Vyc29yKHZhbHVlLCBwLnJlcXVlc3QpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlQcm9wZXJ0aWVzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIHByb3BlcnRpZXMpIHtcbiAgICBwcm9wZXJ0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcCkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByb3h5Q2xhc3MucHJvdG90eXBlLCBwcm9wLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgdGhpc1t0YXJnZXRQcm9wXVtwcm9wXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eVJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJveHlNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbdGFyZ2V0UHJvcF1bcHJvcF0uYXBwbHkodGhpc1t0YXJnZXRQcm9wXSwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm94eUN1cnNvclJlcXVlc3RNZXRob2RzKFByb3h5Q2xhc3MsIHRhcmdldFByb3AsIENvbnN0cnVjdG9yLCBwcm9wZXJ0aWVzKSB7XG4gICAgcHJvcGVydGllcy5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgIGlmICghKHByb3AgaW4gQ29uc3RydWN0b3IucHJvdG90eXBlKSkgcmV0dXJuO1xuICAgICAgUHJveHlDbGFzcy5wcm90b3R5cGVbcHJvcF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeUN1cnNvclJlcXVlc3RDYWxsKHRoaXNbdGFyZ2V0UHJvcF0sIHByb3AsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gSW5kZXgoaW5kZXgpIHtcbiAgICB0aGlzLl9pbmRleCA9IGluZGV4O1xuICB9XG5cbiAgcHJveHlQcm9wZXJ0aWVzKEluZGV4LCAnX2luZGV4JywgW1xuICAgICduYW1lJyxcbiAgICAna2V5UGF0aCcsXG4gICAgJ211bHRpRW50cnknLFxuICAgICd1bmlxdWUnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xuICAgICdnZXQnLFxuICAgICdnZXRLZXknLFxuICAgICdnZXRBbGwnLFxuICAgICdnZXRBbGxLZXlzJyxcbiAgICAnY291bnQnXG4gIF0pO1xuXG4gIHByb3h5Q3Vyc29yUmVxdWVzdE1ldGhvZHMoSW5kZXgsICdfaW5kZXgnLCBJREJJbmRleCwgW1xuICAgICdvcGVuQ3Vyc29yJyxcbiAgICAnb3BlbktleUN1cnNvcidcbiAgXSk7XG5cbiAgZnVuY3Rpb24gQ3Vyc29yKGN1cnNvciwgcmVxdWVzdCkge1xuICAgIHRoaXMuX2N1cnNvciA9IGN1cnNvcjtcbiAgICB0aGlzLl9yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgfVxuXG4gIHByb3h5UHJvcGVydGllcyhDdXJzb3IsICdfY3Vyc29yJywgW1xuICAgICdkaXJlY3Rpb24nLFxuICAgICdrZXknLFxuICAgICdwcmltYXJ5S2V5JyxcbiAgICAndmFsdWUnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoQ3Vyc29yLCAnX2N1cnNvcicsIElEQkN1cnNvciwgW1xuICAgICd1cGRhdGUnLFxuICAgICdkZWxldGUnXG4gIF0pO1xuXG4gIC8vIHByb3h5ICduZXh0JyBtZXRob2RzXG4gIFsnYWR2YW5jZScsICdjb250aW51ZScsICdjb250aW51ZVByaW1hcnlLZXknXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICBpZiAoIShtZXRob2ROYW1lIGluIElEQkN1cnNvci5wcm90b3R5cGUpKSByZXR1cm47XG4gICAgQ3Vyc29yLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnNvciA9IHRoaXM7XG4gICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBjdXJzb3IuX2N1cnNvclttZXRob2ROYW1lXS5hcHBseShjdXJzb3IuX2N1cnNvciwgYXJncyk7XG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KGN1cnNvci5fcmVxdWVzdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcbiAgICAgICAgICByZXR1cm4gbmV3IEN1cnNvcih2YWx1ZSwgY3Vyc29yLl9yZXF1ZXN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICBmdW5jdGlvbiBPYmplY3RTdG9yZShzdG9yZSkge1xuICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XG4gIH1cblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuY3JlYXRlSW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmNyZWF0ZUluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBPYmplY3RTdG9yZS5wcm90b3R5cGUuaW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IEluZGV4KHRoaXMuX3N0b3JlLmluZGV4LmFwcGx5KHRoaXMuX3N0b3JlLCBhcmd1bWVudHMpKTtcbiAgfTtcblxuICBwcm94eVByb3BlcnRpZXMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBbXG4gICAgJ25hbWUnLFxuICAgICdrZXlQYXRoJyxcbiAgICAnaW5kZXhOYW1lcycsXG4gICAgJ2F1dG9JbmNyZW1lbnQnXG4gIF0pO1xuXG4gIHByb3h5UmVxdWVzdE1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdwdXQnLFxuICAgICdhZGQnLFxuICAgICdkZWxldGUnLFxuICAgICdjbGVhcicsXG4gICAgJ2dldCcsXG4gICAgJ2dldEFsbCcsXG4gICAgJ2dldEtleScsXG4gICAgJ2dldEFsbEtleXMnLFxuICAgICdjb3VudCdcbiAgXSk7XG5cbiAgcHJveHlDdXJzb3JSZXF1ZXN0TWV0aG9kcyhPYmplY3RTdG9yZSwgJ19zdG9yZScsIElEQk9iamVjdFN0b3JlLCBbXG4gICAgJ29wZW5DdXJzb3InLFxuICAgICdvcGVuS2V5Q3Vyc29yJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoT2JqZWN0U3RvcmUsICdfc3RvcmUnLCBJREJPYmplY3RTdG9yZSwgW1xuICAgICdkZWxldGVJbmRleCdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gVHJhbnNhY3Rpb24oaWRiVHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl90eCA9IGlkYlRyYW5zYWN0aW9uO1xuICAgIHRoaXMuY29tcGxldGUgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uY29tcGxldGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICAgIGlkYlRyYW5zYWN0aW9uLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KGlkYlRyYW5zYWN0aW9uLmVycm9yKTtcbiAgICAgIH07XG4gICAgICBpZGJUcmFuc2FjdGlvbi5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJlamVjdChpZGJUcmFuc2FjdGlvbi5lcnJvcik7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLm9iamVjdFN0b3JlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTdG9yZSh0aGlzLl90eC5vYmplY3RTdG9yZS5hcHBseSh0aGlzLl90eCwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKFRyYW5zYWN0aW9uLCAnX3R4JywgW1xuICAgICdvYmplY3RTdG9yZU5hbWVzJyxcbiAgICAnbW9kZSdcbiAgXSk7XG5cbiAgcHJveHlNZXRob2RzKFRyYW5zYWN0aW9uLCAnX3R4JywgSURCVHJhbnNhY3Rpb24sIFtcbiAgICAnYWJvcnQnXG4gIF0pO1xuXG4gIGZ1bmN0aW9uIFVwZ3JhZGVEQihkYiwgb2xkVmVyc2lvbiwgdHJhbnNhY3Rpb24pIHtcbiAgICB0aGlzLl9kYiA9IGRiO1xuICAgIHRoaXMub2xkVmVyc2lvbiA9IG9sZFZlcnNpb247XG4gICAgdGhpcy50cmFuc2FjdGlvbiA9IG5ldyBUcmFuc2FjdGlvbih0cmFuc2FjdGlvbik7XG4gIH1cblxuICBVcGdyYWRlREIucHJvdG90eXBlLmNyZWF0ZU9iamVjdFN0b3JlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTdG9yZSh0aGlzLl9kYi5jcmVhdGVPYmplY3RTdG9yZS5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKFVwZ3JhZGVEQiwgJ19kYicsIFtcbiAgICAnbmFtZScsXG4gICAgJ3ZlcnNpb24nLFxuICAgICdvYmplY3RTdG9yZU5hbWVzJ1xuICBdKTtcblxuICBwcm94eU1ldGhvZHMoVXBncmFkZURCLCAnX2RiJywgSURCRGF0YWJhc2UsIFtcbiAgICAnZGVsZXRlT2JqZWN0U3RvcmUnLFxuICAgICdjbG9zZSdcbiAgXSk7XG5cbiAgZnVuY3Rpb24gREIoZGIpIHtcbiAgICB0aGlzLl9kYiA9IGRiO1xuICB9XG5cbiAgREIucHJvdG90eXBlLnRyYW5zYWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2FjdGlvbih0aGlzLl9kYi50cmFuc2FjdGlvbi5hcHBseSh0aGlzLl9kYiwgYXJndW1lbnRzKSk7XG4gIH07XG5cbiAgcHJveHlQcm9wZXJ0aWVzKERCLCAnX2RiJywgW1xuICAgICduYW1lJyxcbiAgICAndmVyc2lvbicsXG4gICAgJ29iamVjdFN0b3JlTmFtZXMnXG4gIF0pO1xuXG4gIHByb3h5TWV0aG9kcyhEQiwgJ19kYicsIElEQkRhdGFiYXNlLCBbXG4gICAgJ2Nsb3NlJ1xuICBdKTtcblxuICAvLyBBZGQgY3Vyc29yIGl0ZXJhdG9yc1xuICAvLyBUT0RPOiByZW1vdmUgdGhpcyBvbmNlIGJyb3dzZXJzIGRvIHRoZSByaWdodCB0aGluZyB3aXRoIHByb21pc2VzXG4gIFsnb3BlbkN1cnNvcicsICdvcGVuS2V5Q3Vyc29yJ10uZm9yRWFjaChmdW5jdGlvbihmdW5jTmFtZSkge1xuICAgIFtPYmplY3RTdG9yZSwgSW5kZXhdLmZvckVhY2goZnVuY3Rpb24oQ29uc3RydWN0b3IpIHtcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZVtmdW5jTmFtZS5yZXBsYWNlKCdvcGVuJywgJ2l0ZXJhdGUnKV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIG5hdGl2ZU9iamVjdCA9IHRoaXMuX3N0b3JlIHx8IHRoaXMuX2luZGV4O1xuICAgICAgICB2YXIgcmVxdWVzdCA9IG5hdGl2ZU9iamVjdFtmdW5jTmFtZV0uYXBwbHkobmF0aXZlT2JqZWN0LCBhcmdzLnNsaWNlKDAsIC0xKSk7XG4gICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY2FsbGJhY2socmVxdWVzdC5yZXN1bHQpO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gcG9seWZpbGwgZ2V0QWxsXG4gIFtJbmRleCwgT2JqZWN0U3RvcmVdLmZvckVhY2goZnVuY3Rpb24oQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEFsbCkgcmV0dXJuO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRBbGwgPSBmdW5jdGlvbihxdWVyeSwgY291bnQpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXM7XG4gICAgICB2YXIgaXRlbXMgPSBbXTtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgaW5zdGFuY2UuaXRlcmF0ZUN1cnNvcihxdWVyeSwgZnVuY3Rpb24oY3Vyc29yKSB7XG4gICAgICAgICAgaWYgKCFjdXJzb3IpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtcy5wdXNoKGN1cnNvci52YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoY291bnQgIT09IHVuZGVmaW5lZCAmJiBpdGVtcy5sZW5ndGggPT0gY291bnQpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaXRlbXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjdXJzb3IuY29udGludWUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICB2YXIgZXhwID0ge1xuICAgIG9wZW46IGZ1bmN0aW9uKG5hbWUsIHZlcnNpb24sIHVwZ3JhZGVDYWxsYmFjaykge1xuICAgICAgdmFyIHAgPSBwcm9taXNpZnlSZXF1ZXN0Q2FsbChpbmRleGVkREIsICdvcGVuJywgW25hbWUsIHZlcnNpb25dKTtcbiAgICAgIHZhciByZXF1ZXN0ID0gcC5yZXF1ZXN0O1xuXG4gICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGlmICh1cGdyYWRlQ2FsbGJhY2spIHtcbiAgICAgICAgICB1cGdyYWRlQ2FsbGJhY2sobmV3IFVwZ3JhZGVEQihyZXF1ZXN0LnJlc3VsdCwgZXZlbnQub2xkVmVyc2lvbiwgcmVxdWVzdC50cmFuc2FjdGlvbikpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcC50aGVuKGZ1bmN0aW9uKGRiKSB7XG4gICAgICAgIHJldHVybiBuZXcgREIoZGIpO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBkZWxldGU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0Q2FsbChpbmRleGVkREIsICdkZWxldGVEYXRhYmFzZScsIFtuYW1lXSk7XG4gICAgfVxuICB9O1xuXG4gIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZXhwO1xuICAgIG1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBtb2R1bGUuZXhwb3J0cztcbiAgfVxuICBlbHNlIHtcbiAgICBzZWxmLmlkYiA9IGV4cDtcbiAgfVxufSgpKTtcbiIsImltcG9ydCBEQkhlbHBlciBmcm9tICcuL2RiaGVscGVyLmpzJztcclxuXHJcbmxldCByZXN0YXVyYW50cyxcclxuICAgIG5laWdoYm9yaG9vZHMsXHJcbiAgICBjdWlzaW5lcztcclxubGV0IG1hcDtcclxubGV0IG1hcmtlcnMgPSBbXTtcclxuXHJcbi8qKlxyXG4gKiBGZXRjaCBuZWlnaGJvcmhvb2RzIGFuZCBjdWlzaW5lcyBhcyBzb29uIGFzIHRoZSBwYWdlIGlzIGxvYWRlZC5cclxuICovXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XHJcbiAgICBmZXRjaE5laWdoYm9yaG9vZHMoKTtcclxuICAgIGZldGNoQ3Vpc2luZXMoKTtcclxufSk7XHJcbi8qKlxyXG4gKiBVcGRhdGUgcmVzdGF1cmFudHMgb24gY2hhbmdlXHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gdXBkYXRlKGlkKSB7XHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgIHVwZGF0ZVJlc3RhdXJhbnRzKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxudXBkYXRlKCduZWlnaGJvcmhvb2RzLXNlbGVjdCcpO1xyXG51cGRhdGUoJ2N1aXNpbmVzLXNlbGVjdCcpO1xyXG5cclxuLyoqXHJcbiAqIEZldGNoIGFsbCBuZWlnaGJvcmhvb2RzIGFuZCBzZXQgdGhlaXIgSFRNTC5cclxuICovXHJcbmxldCBmZXRjaE5laWdoYm9yaG9vZHMgPSAoKSA9PiB7XHJcbiAgICBEQkhlbHBlci5mZXRjaE5laWdoYm9yaG9vZHMoKGVycm9yLCBuZWlnaGJvcmhvb2RzKSA9PiB7XHJcbiAgICAgICAgaWYgKGVycm9yKSB7IC8vIEdvdCBhbiBlcnJvclxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZWxmLm5laWdoYm9yaG9vZHMgPSBuZWlnaGJvcmhvb2RzO1xyXG4gICAgICAgICAgICBmaWxsTmVpZ2hib3Job29kc0hUTUwoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgbmVpZ2hib3Job29kcyBIVE1MLlxyXG4gKi9cclxubGV0IGZpbGxOZWlnaGJvcmhvb2RzSFRNTCA9IChuZWlnaGJvcmhvb2RzID0gc2VsZi5uZWlnaGJvcmhvb2RzKSA9PiB7XHJcbiAgICBjb25zdCBzZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmVpZ2hib3Job29kcy1zZWxlY3QnKTtcclxuICAgIG5laWdoYm9yaG9vZHMuZm9yRWFjaChuZWlnaGJvcmhvb2QgPT4ge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG4gICAgICAgIG9wdGlvbi5pbm5lckhUTUwgPSBuZWlnaGJvcmhvb2Q7XHJcbiAgICAgICAgb3B0aW9uLnZhbHVlID0gbmVpZ2hib3Job29kO1xyXG4gICAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAnb3B0aW9uJyk7XHJcbiAgICAgICAgb3B0aW9uLnNldEF0dHJpYnV0ZShcImFyaWEtbGFiZWxcIiwgbmVpZ2hib3Job29kKTtcclxuICAgICAgICBzZWxlY3QuYXBwZW5kKG9wdGlvbik7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBGZXRjaCBhbGwgY3Vpc2luZXMgYW5kIHNldCB0aGVpciBIVE1MLlxyXG4gKi9cclxubGV0IGZldGNoQ3Vpc2luZXMgPSAoKSA9PiB7XHJcbiAgICBEQkhlbHBlci5mZXRjaEN1aXNpbmVzKChlcnJvciwgY3Vpc2luZXMpID0+IHtcclxuICAgICAgICBpZiAoZXJyb3IpIHsgLy8gR290IGFuIGVycm9yIVxyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZWxmLmN1aXNpbmVzID0gY3Vpc2luZXM7XHJcbiAgICAgICAgICAgIGZpbGxDdWlzaW5lc0hUTUwoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgY3Vpc2luZXMgSFRNTC5cclxuICovXHJcbmxldCBmaWxsQ3Vpc2luZXNIVE1MID0gKGN1aXNpbmVzID0gc2VsZi5jdWlzaW5lcykgPT4ge1xyXG4gICAgY29uc3Qgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2N1aXNpbmVzLXNlbGVjdCcpO1xyXG5cclxuICAgIGN1aXNpbmVzLmZvckVhY2goY3Vpc2luZSA9PiB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbiAgICAgICAgb3B0aW9uLmlubmVySFRNTCA9IGN1aXNpbmU7XHJcbiAgICAgICAgb3B0aW9uLnZhbHVlID0gY3Vpc2luZTtcclxuICAgICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCdyb2xlJywgJ29wdGlvbicpO1xyXG4gICAgICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIGN1aXNpbmUpO1xyXG4gICAgICAgIHNlbGVjdC5hcHBlbmQob3B0aW9uKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgR29vZ2xlIG1hcCwgY2FsbGVkIGZyb20gSFRNTC5cclxuICovXHJcbndpbmRvdy5pbml0TWFwID0gKCkgPT4ge1xyXG4gICAgbGV0IGxvYyA9IHtcclxuICAgICAgICBsYXQ6IDQwLjcyMjIxNixcclxuICAgICAgICBsbmc6IC03My45ODc1MDFcclxuICAgIH07XHJcbiAgICBzZWxmLm1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XHJcbiAgICAgICAgem9vbTogMTIsXHJcbiAgICAgICAgY2VudGVyOiBsb2MsXHJcbiAgICAgICAgc2Nyb2xsd2hlZWw6IGZhbHNlXHJcbiAgICB9KTtcclxuICAgIHVwZGF0ZVJlc3RhdXJhbnRzKCk7XHJcbn07XHJcblxyXG4vKipcclxuICogVXBkYXRlIHBhZ2UgYW5kIG1hcCBmb3IgY3VycmVudCByZXN0YXVyYW50cy5cclxuICovXHJcbmxldCB1cGRhdGVSZXN0YXVyYW50cyA9ICgpID0+IHtcclxuICAgIGNvbnN0IGNTZWxlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3Vpc2luZXMtc2VsZWN0Jyk7XHJcbiAgICBjb25zdCBuU2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25laWdoYm9yaG9vZHMtc2VsZWN0Jyk7XHJcblxyXG4gICAgY29uc3QgY0luZGV4ID0gY1NlbGVjdC5zZWxlY3RlZEluZGV4O1xyXG4gICAgY29uc3QgbkluZGV4ID0gblNlbGVjdC5zZWxlY3RlZEluZGV4O1xyXG5cclxuICAgIGNvbnN0IGN1aXNpbmUgPSBjU2VsZWN0W2NJbmRleF0udmFsdWU7XHJcbiAgICBjb25zdCBuZWlnaGJvcmhvb2QgPSBuU2VsZWN0W25JbmRleF0udmFsdWU7XHJcblxyXG4gICAgREJIZWxwZXIuZmV0Y2hSZXN0YXVyYW50QnlDdWlzaW5lQW5kTmVpZ2hib3Job29kKGN1aXNpbmUsIG5laWdoYm9yaG9vZCwgKGVycm9yLCByZXN0YXVyYW50cykgPT4ge1xyXG4gICAgICAgIGlmIChlcnJvcikgeyAvLyBHb3QgYW4gZXJyb3IhXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc2V0UmVzdGF1cmFudHMocmVzdGF1cmFudHMpO1xyXG4gICAgICAgICAgICBmaWxsUmVzdGF1cmFudHNIVE1MKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDbGVhciBjdXJyZW50IHJlc3RhdXJhbnRzLCB0aGVpciBIVE1MIGFuZCByZW1vdmUgdGhlaXIgbWFwIG1hcmtlcnMuXHJcbiAqL1xyXG5sZXQgcmVzZXRSZXN0YXVyYW50cyA9IChyZXN0YXVyYW50cykgPT4ge1xyXG4gICAgLy8gUmVtb3ZlIGFsbCByZXN0YXVyYW50c1xyXG4gICAgc2VsZi5yZXN0YXVyYW50cyA9IFtdO1xyXG4gICAgY29uc3QgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudHMtbGlzdCcpO1xyXG4gICAgdWwuaW5uZXJIVE1MID0gJyc7XHJcblxyXG4gICAgLy8gUmVtb3ZlIGFsbCBtYXAgbWFya2Vyc1xyXG4gICAgbWFya2Vycy5mb3JFYWNoKG0gPT4gbS5zZXRNYXAobnVsbCkpO1xyXG4gICAgc2VsZi5tYXJrZXJzID0gW107XHJcbiAgICBzZWxmLnJlc3RhdXJhbnRzID0gcmVzdGF1cmFudHM7XHJcbn07XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGFsbCByZXN0YXVyYW50cyBIVE1MIGFuZCBhZGQgdGhlbSB0byB0aGUgd2VicGFnZS5cclxuICovXHJcbmxldCBmaWxsUmVzdGF1cmFudHNIVE1MID0gKHJlc3RhdXJhbnRzID0gc2VsZi5yZXN0YXVyYW50cykgPT4ge1xyXG4gICAgY29uc3QgdWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVzdGF1cmFudHMtbGlzdCcpO1xyXG4gICAgcmVzdGF1cmFudHMuZm9yRWFjaCgocmVzdGF1cmFudCwgaW5kZXgpID0+IHtcclxuICAgICAgICB1bC5hcHBlbmQoY3JlYXRlUmVzdGF1cmFudEhUTUwocmVzdGF1cmFudCwgcmVzdGF1cmFudHMubGVuZ3RoLCBpbmRleCkpO1xyXG4gICAgfSk7XHJcbiAgICBhZGRNYXJrZXJzVG9NYXAoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgcmVzdGF1cmFudCBIVE1MLlxyXG4gKi9cclxubGV0IGNyZWF0ZVJlc3RhdXJhbnRIVE1MID0gKHJlc3RhdXJhbnQsIGxlbmd0aCwgaW5kZXgpID0+IHtcclxuICAgIGNvbnN0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuICAgIGxpLnNldEF0dHJpYnV0ZSgnYXJpYS1zZXRzaXplJywgbGVuZ3RoKTtcclxuICAgIGxpLnNldEF0dHJpYnV0ZSgnYXJpYS1wb3NpbnNldCcsIChOdW1iZXIoaW5kZXgpKzEpLnRvU3RyaW5nKCkpO1xyXG4gICAgY29uc3QgaW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgIGltYWdlLmNsYXNzTmFtZSA9ICdyZXN0YXVyYW50LWltZyBsYXp5JztcclxuICAgIGltYWdlLnNldEF0dHJpYnV0ZSgnZGF0YS1zcmMnLCBEQkhlbHBlci5pbWFnZVVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudC5waG90b2dyYXBoLCAnL3Jlc3BvbnNpdmUvJywgJ19zbScpKTtcclxuICAgIGltYWdlLnNyYyA9ICcuL2Rpc3QvaW1nL2Rvd25sb2FkLmpwZyc7XHJcbiAgICBpbWFnZS5hbHQgPSBgSW1hZ2Ugb2YgJHtyZXN0YXVyYW50Lm5hbWV9IFJlc3RhdXJhbnRgO1xyXG4gICAgbGkuYXBwZW5kKGltYWdlKTtcclxuXHJcbiAgICBjb25zdCBuYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDInKTtcclxuICAgIG5hbWUuaW5uZXJIVE1MID0gcmVzdGF1cmFudC5uYW1lO1xyXG4gICAgbGkuYXBwZW5kKG5hbWUpO1xyXG5cclxuICAgIGNvbnN0IG5laWdoYm9yaG9vZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgIG5laWdoYm9yaG9vZC5pbm5lckhUTUwgPSByZXN0YXVyYW50Lm5laWdoYm9yaG9vZDtcclxuICAgIGxpLmFwcGVuZChuZWlnaGJvcmhvb2QpO1xyXG5cclxuICAgIGNvbnN0IGFkZHJlc3MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICBhZGRyZXNzLmlubmVySFRNTCA9IHJlc3RhdXJhbnQuYWRkcmVzcztcclxuICAgIGxpLmFwcGVuZChhZGRyZXNzKTtcclxuXHJcbiAgICBjb25zdCBtb3JlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgbW9yZS5pbm5lckhUTUwgPSAnVmlldyBEZXRhaWxzJztcclxuICAgIG1vcmUuaHJlZiA9IERCSGVscGVyLnVybEZvclJlc3RhdXJhbnQocmVzdGF1cmFudCk7XHJcbiAgICBtb3JlLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdWaWV3IGRldGFpbHMgJyArIHJlc3RhdXJhbnQubmFtZSk7XHJcbiAgICBsaS5hcHBlbmQobW9yZSk7XHJcblxyXG4gICAgcmV0dXJuIGxpXHJcbn07XHJcblxyXG4vKipcclxuICogQWRkIG1hcmtlcnMgZm9yIGN1cnJlbnQgcmVzdGF1cmFudHMgdG8gdGhlIG1hcC5cclxuICovXHJcbmxldCBhZGRNYXJrZXJzVG9NYXAgPSAocmVzdGF1cmFudHMgPSBzZWxmLnJlc3RhdXJhbnRzKSA9PiB7XHJcbiAgICByZXN0YXVyYW50cy5mb3JFYWNoKHJlc3RhdXJhbnQgPT4ge1xyXG4gICAgICAgIC8vIEFkZCBtYXJrZXIgdG8gdGhlIG1hcFxyXG4gICAgICAgIGNvbnN0IG1hcmtlciA9IERCSGVscGVyLm1hcE1hcmtlckZvclJlc3RhdXJhbnQocmVzdGF1cmFudCwgc2VsZi5tYXApO1xyXG4gICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG1hcmtlci51cmxcclxuICAgICAgICB9KTtcclxuICAgICAgICBzZWxmLm1hcmtlcnMucHVzaChtYXJrZXIpO1xyXG4gICAgfSk7XHJcbn07XHJcbiIsImZ1bmN0aW9uIGxhenlMb2FkKCl7XHJcbiAgICBsZXQgbGF6eSA9XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGF6eScpO1xyXG5cclxuICAgIGZvcihsZXQgaT0wOyBpPGxhenkubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGlmKGlzSW5WaWV3cG9ydChsYXp5W2ldKSl7XHJcbiAgICAgICAgICAgIGxhenlbaV0uc3JjID1cclxuICAgICAgICAgICAgICAgIGxhenlbaV0uZ2V0QXR0cmlidXRlKCdkYXRhLXNyYycpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVnaXN0ZXJMaXN0ZW5lcihldmVudCwgZnVuYykge1xyXG4gICAgaWYgKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGZ1bmMpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdpbmRvdy5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGZ1bmMpXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzSW5WaWV3cG9ydChlbCl7XHJcbiAgICBsZXQgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgcmVjdC5ib3R0b20gPj0gMCAmJlxyXG4gICAgICAgIHJlY3QucmlnaHQgPj0gMCAmJlxyXG5cclxuICAgICAgICByZWN0LnRvcCA8PSAoXHJcbiAgICAgICAgICAgIHdpbmRvdy5pbm5lckhlaWdodCB8fFxyXG4gICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSAmJlxyXG5cclxuICAgICAgICByZWN0LmxlZnQgPD0gKFxyXG4gICAgICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCB8fFxyXG4gICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpXHJcbiAgICApO1xyXG59XHJcblxyXG5yZWdpc3Rlckxpc3RlbmVyKCdsb2FkJywgbGF6eUxvYWQpO1xyXG5yZWdpc3Rlckxpc3RlbmVyKCdzY3JvbGwnLCBsYXp5TG9hZCk7Il0sInNvdXJjZVJvb3QiOiIifQ==