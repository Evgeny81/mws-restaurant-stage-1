!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),o=n.n(r);const i="restaurants";class a{static get DATABASE_URL(){return"http://localhost:1337/restaurants/"}static idb(){return o.a.open("app",1,e=>{e.createObjectStore(i,{keyPath:"id"}).createIndex("id","id")})}static saveIdb(e){return a.idb().then(t=>{if(!t)return;const n=t.transaction(i,"readwrite"),r=n.objectStore(i);return e.forEach(e=>{r.put(e)}),n.complete})}static getIdb(){return a.idb().then(e=>{if(!e)return;return e.transaction(i).objectStore(i).getAll()})}static fetchData(){return fetch(a.DATABASE_URL).then(e=>e.json()).then(e=>(a.saveIdb(e),e))}static fetchRestaurants(e){return a.getIdb().then(e=>e.length?Promise.resolve(e):a.fetchData()).then(t=>{e(null,t)}).catch(t=>{e(t,null)})}static fetchRestaurantById(e,t){a.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){a.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){a.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){a.fetchRestaurants((r,o)=>{if(r)n(r,null);else{let r=o;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){a.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){a.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e="10",t="/",n=""){return`/dist/img${t}${e}${n}.jpg`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:a.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}}},function(e,t,n){"use strict";!function(){function t(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function n(e,n,r){var o,i=new Promise(function(i,a){t(o=e[n].apply(e,r)).then(i,a)});return i.request=o,i}function r(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function o(e,t,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return n(this[t],o,arguments)})})}function i(e,t,n,r){r.forEach(function(r){r in n.prototype&&(e.prototype[r]=function(){return this[t][r].apply(this[t],arguments)})})}function a(e,t,r,o){o.forEach(function(o){o in r.prototype&&(e.prototype[o]=function(){return e=this[t],(r=n(e,o,arguments)).then(function(e){if(e)return new u(e,r.request)});var e,r})})}function s(e){this._index=e}function u(e,t){this._cursor=e,this._request=t}function c(e){this._store=e}function l(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function d(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new l(n)}function p(e){this._db=e}r(s,"_index",["name","keyPath","multiEntry","unique"]),o(s,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),a(s,"_index",IDBIndex,["openCursor","openKeyCursor"]),r(u,"_cursor",["direction","key","primaryKey","value"]),o(u,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(e){e in IDBCursor.prototype&&(u.prototype[e]=function(){var n=this,r=arguments;return Promise.resolve().then(function(){return n._cursor[e].apply(n._cursor,r),t(n._request).then(function(e){if(e)return new u(e,n._request)})})})}),c.prototype.createIndex=function(){return new s(this._store.createIndex.apply(this._store,arguments))},c.prototype.index=function(){return new s(this._store.index.apply(this._store,arguments))},r(c,"_store",["name","keyPath","indexNames","autoIncrement"]),o(c,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),a(c,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),i(c,"_store",IDBObjectStore,["deleteIndex"]),l.prototype.objectStore=function(){return new c(this._tx.objectStore.apply(this._tx,arguments))},r(l,"_tx",["objectStoreNames","mode"]),i(l,"_tx",IDBTransaction,["abort"]),d.prototype.createObjectStore=function(){return new c(this._db.createObjectStore.apply(this._db,arguments))},r(d,"_db",["name","version","objectStoreNames"]),i(d,"_db",IDBDatabase,["deleteObjectStore","close"]),p.prototype.transaction=function(){return new l(this._db.transaction.apply(this._db,arguments))},r(p,"_db",["name","version","objectStoreNames"]),i(p,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[c,s].forEach(function(t){t.prototype[e.replace("open","iterate")]=function(){var t,n=(t=arguments,Array.prototype.slice.call(t)),r=n[n.length-1],o=this._store||this._index,i=o[e].apply(o,n.slice(0,-1));i.onsuccess=function(){r(i.result)}}})}),[s,c].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,r=[];return new Promise(function(o){n.iterateCursor(e,function(e){e?(r.push(e.value),void 0===t||r.length!=t?e.continue():o(r)):o(r)})})})});var f={open:function(e,t,r){var o=n(indexedDB,"open",[e,t]),i=o.request;return i.onupgradeneeded=function(e){r&&r(new d(i.result,e.oldVersion,i.transaction))},o.then(function(e){return new p(e)})},delete:function(e){return n(indexedDB,"deleteDatabase",[e])}};e.exports=f,e.exports.default=e.exports}()},function(e,t,n){"use strict";n.r(t);var r=n(0);const o=[{suffix:"_sm",media:"(max-width: 440px)"},{suffix:"_md",media:"(max-width: 640px),(min-width: 1101px) and (max-width: 1280px)"}];window.initMap=(()=>{i((e,t)=>{e?console.error(e):(self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:t.latlng,scrollwheel:!1}),l(),r.a.mapMarkerForRestaurant(self.restaurant,self.map))})});let i=e=>{if(self.restaurant)return void e(null,self.restaurant);const t=d("id");t?r.a.fetchRestaurantById(t,(t,n)=>{self.restaurant=n,n?(a(),e(null,n)):console.error(t)}):(error="No restaurant id in URL",e(error,null))},a=(e=self.restaurant)=>{document.getElementById("restaurant-name").innerHTML=e.name,document.getElementById("restaurant-address").innerHTML=e.address;const t=document.getElementById("restaurant-img");t.className="restaurant-img",t.src=r.a.imageUrlForRestaurant(e.photograph),t.alt=`Image of ${e.name} Restaurant`;const n=document.getElementById("restaurant-picture"),i=[];o.forEach(t=>{const n=document.createElement("source");n.srcset=r.a.imageUrlForRestaurant(e.photograph,"/responsive/",t.suffix),n.media=t.media,i.push(n)}),i.forEach(e=>{n.insertBefore(e,t)}),document.getElementById("restaurant-cuisine").innerHTML=e.cuisine_type,e.operating_hours&&s(),u()},s=(e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");for(let n in e){const r=document.createElement("tr"),o=document.createElement("td");o.innerHTML=n,o.setAttribute("aria-label","Open "+n),r.appendChild(o);const i=document.createElement("td");i.innerHTML=e[n],i.setAttribute("aria-label","Opening hours "+e[n]),r.appendChild(i),t.appendChild(r)}},u=(e=self.restaurant.reviews)=>{const t=document.getElementById("reviews-container"),n=document.createElement("h3");if(n.innerHTML="Reviews",t.appendChild(n),!e){const e=document.createElement("p");return e.innerHTML="No reviews yet!",void t.appendChild(e)}const r=document.getElementById("reviews-list");e.forEach((t,n)=>{r.appendChild(c(t,e.length,n))}),t.appendChild(r)},c=(e,t,n)=>{const r=document.createElement("li");r.setAttribute("aria-setsize",t),r.setAttribute("aria-posinset",(Number(n)+1).toString());const o=document.createElement("p");o.innerHTML=e.name,r.appendChild(o);const i=document.createElement("p");i.innerHTML=e.date,r.appendChild(i);const a=document.createElement("p");a.innerHTML=`Rating: ${e.rating}`,r.appendChild(a);const s=document.createElement("p");return s.innerHTML=e.comments,r.appendChild(s),r},l=(e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),n=document.createElement("li");n.innerHTML=e.name,n.setAttribute("aria-current","page"),t.appendChild(n)},d=(e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const n=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return n?n[2]?decodeURIComponent(n[2].replace(/\+/g," ")):"":null}},function(e,t,n){e.exports=n(2)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,